// Allows ObjectMapper to map a JSON array to and from a Realm List
// via a custom ObjectMapper transform https://github.com/Hearst-DD/ObjectMapper#custom-transforms.
// This is used in the autogenerated code when Realm + ObjectMapper is both used.
// Add this to your Swift project.
//
// arrayOfThings <- (map["things"], ArrayTransform())
//

import Foundation
import RealmSwift
import ObjectMapper

class ArrayTransform<T:RealmSwift.Object where T:Mappable> : TransformType {
    typealias Object = List<T>
    typealias JSON = Array<AnyObject>

    func transformFromJSON(value: AnyObject?) -> List<T>? {
        let result = List<T>()
        if let tempArr = value as! Array<AnyObject>? {
            for entry in tempArr {
                let mapper = Mapper<T>()
                let model : T = mapper.map(entry)!
                result.append(model)
            }
        }
        return result
    }

    func transformToJSON(value: List<T>?) -> Array<AnyObject>? {
        if (value?.count > 0)
        {
            var result = Array<T>()
            for entry in value! {
                result.append(entry)
            }
            return result
        }
        return nil
    }
}

extension NSData {
    func utf8String() -> String? {
        return String(data: self, encoding: NSUTF8StringEncoding)
    }
}